@page "/"
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory

<PageTitle>Home</PageTitle>

<div class="w-100 h-100 d-flex flex-column justify-content-center">
    <div class="w-100 mt-5">
        <h1>Persons Table</h1>
    </div>
    <div class="w-100 h-100 d-flex justify-content-center">
        <div class="w-75 h-100 d-flex flex-column justify-content-center align-items-center">
            @if (_persons is null)
            {
                <div class="spinner-border" style="width: 15rem; height: 15rem;"></div>
            }
            else
            {
                <table class="table">
                    <thead>
                    <tr>
                        <th scope="col">#</th>
                        <th scope="col">First Name</th>
                        <th scope="col">Last Name</th>
                        <th scope="col">College Name</th>
                        <th scope="col">
                            <button>Add</button>
                        </th>
                    </tr>
                    </thead>
                    <tbody>
                    @if (_persons is not null)
                    {
                        @foreach (var person in _persons)
                        {
                            <tr style="vertical-align: middle;">
                                <th scope="row">
                                    <Checkbox Label="@person.Id.ToString()"/>
                                </th>
                                <td>@person.FirstName</td>
                                <td>@person.LastName</td>
                                <td>@person.CollegeName</td>
                                <td>
                                    <button class="btn btn-outline-secondary">Details</button>
                                </td>
                            </tr>
                        }
                    }
                    </tbody>
                </table>
                <div class="w-100 d-flex justify-content-between align-items-center">
                    <div class="w-75">
                        Pages
                    </div>
                    <div class="w-25 d-flex justify-content-between align-items-center">
                        Row number
                        <div class="d-flex justify-content-between">
                            <button class="btn btn-outline-secondary" style="margin-right: 14px;">
                                <i class="bi bi-caret-left-fill"></i>
                            </button>
                            <button class="btn btn-outline-secondary">
                                <i class="bi bi-caret-right-fill"></i>
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code
{
    private IEnumerable<Persona>? _persons = Array.Empty<Persona>();
    public bool BasicCheckBox1 { get; set; } = false;
    private bool _getPersonsError;
    private bool _shouldRender;

    protected override bool ShouldRender() => _shouldRender;

    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(
            HttpMethod.Get,
            "http://localhost:5056/api/Persons");
        request.Headers.Add("Accept", "application/cleanproject");
        request.Headers.Add("User-Agent", "HttpCleanProjectFactory");
        var client = ClientFactory.CreateClient();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            await using var responseStream = await response.Content.ReadAsStreamAsync();
            _persons = await JsonSerializer.DeserializeAsync<IEnumerable<Persona>>(responseStream);
            if (_persons is not null)
            {
                foreach (var person in _persons)
                {
                    Console.WriteLine(person.CollegeName);
                }
            }
            else
            {
                Console.WriteLine(_persons);
            }
        }
        else
        {
            _getPersonsError = true;
        }

        _shouldRender = true;
    }

    public class Persona
    {
        [JsonPropertyName(("id"))] public int? Id { get; set; }
        [JsonPropertyName(("firstName"))] public string? FirstName { get; set; }
        [JsonPropertyName(("lastName"))] public string? LastName { get; set; }
        [JsonPropertyName(("collegeName"))] public string? CollegeName { get; set; }
    }
}